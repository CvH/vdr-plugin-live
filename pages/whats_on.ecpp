<%pre>
#include <vdr/plugin.h>
#include <vdr/channels.h>
#include <vdr/epg.h>
#include <vdr/config.h>
#include <vdr/i18n.h>
#include "setup.h"
#include "tools.h"

using namespace vdrlive;

</%pre>
<%args>
type = "now";
</%args>
<%include>page_init.eh</%include>
<{

cSchedulesLock schedulesLock;
const cSchedules* Schedules = cSchedules::Schedules(schedulesLock);

std::string head;
if (type == "now") {
	head = tr("What's running at")+std::string(" ")+FormatDateTime(tr("%I:%M %p"), time(0));
} else {
	head = tr("What's on next?");
}

}>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
	<head>
		<title>VDR-Live - <$ head $></title>
		<link rel="stylesheet" type="text/css" href="/styles.css" />
    <script type="text/javascript" language="javascript" src="domLib.js"></script>
    <script type="text/javascript" language="javascript" src="domTT.js"></script>
    <script type="text/javascript" language="javascript">
			var domTT_styleClass = 'domTTOverlib';
    </script>
	</head>
	<body>
		<div class="left_area">
			<& pageelems.logo &>
			<& menu >
		</div>
		<div class="right_area">
			<div class="inhalt">
				<& pageelems.header_box content=(head) &>
<{
	ReadLock channelsLock( Channels );
	if (channelsLock) {
		for (cChannel *Channel = Channels.First(); Channel && Channel->Number() <= LiveSetup().GetLastChannel(); Channel = Channels.Next(Channel)) {
			if (!Channel->GroupSep()) {
				const cSchedule *Schedule = Schedules->GetSchedule(Channel);
				if (Schedule) {
					const cEvent *Event = (type == "now" ? Schedule->GetPresentEvent() : Schedule->GetFollowingEvent());
						if (Event) {
							std::string title(Event->Title() ? Event->Title() : "");
							std::string channel_name(Channel->Name());
							std::string channel_id(*Channel->GetChannelID().ToString());
							std::string short_description(Event->ShortText() ? Event->ShortText() : "");
							std::string description(Event->Description() ? Event->Description() : "");
							std::string start(Event->StartTime() ? FormatDateTime(tr("%I:%M %p"), Event->StartTime()) : "");
							std::string end(Event->EndTime() ? FormatDateTime(tr("%I:%M %p"), Event->EndTime()) : "");
							std::string start_h(FormatDateTime( "%H", Event->StartTime()));
							std::string end_h(FormatDateTime( "%H", Event->EndTime()));
							std::string start_m(FormatDateTime( "%M", Event->StartTime()));
							std::string end_m(FormatDateTime( "%M", Event->EndTime()));

							bool truncated = false;
							description = StringWordTruncate(description, 250, truncated);
							if (truncated) {
								description += std::string(" ") + tr("more") + std::string(" ...");
							}
}>
				<div class="event">
					<div class="station">
						<div><div><div><$ channel_name $></div></div></div>
					</div>
					<div class="tools">
						<a href="edit_timer.html?channel=<$ channel_id $>&title=<$ title $>&start_h=<$ start_h $>&end_h=<$ end_h $>&start_m=<$ start_m $>&end_m=<$ end_m $>"><img src="/record.png" alt="" <& tooltip_widget tooltip=(tr("Record this")) &> /></a>
					</div>
					<div class="content">
						<div class="info"><$ start $> - <$ end $></div>
						<div class="title"><$ title $></div>
						<div class="short"><$ short_description $></div>
						<div class="description">
							<$  description $>
						</div>
					</div>
				</div>


<{
					}
				}
			}
		}
	}
}>
			</div>
		</div>
	</body>
</html>
<%include>page_exit.eh</%include>
