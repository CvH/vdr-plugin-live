<%pre>
#include <vdr/plugin.h>
#include <vdr/channels.h>
#include <vdr/epg.h>
#include <vdr/config.h>
#include <vdr/i18n.h>
#include "livefeatures.h"
#include "setup.h"
#include "tools.h"
#include "epg_events.h"
#include "epgsearch.h"

using namespace std;
using namespace vdrlive;

static const size_t maximumDescriptionLength = 300;
static const size_t maximumTooltipHintLength = 150;

</%pre>
<%args>
type = "now";
string mode;
string attime;
string fixtime;
</%args>
<%session scope="global">
bool logged_in(false);
</%session>
<%request scope="page">
string current_type;
string current_mode;
string current_attime;
string current_fixtime;
string current_displaytime;
</%request>
<%include>page_init.eh</%include>
<%cpp>
if (!logged_in && LiveSetup().UseAuth()) return reply.redirect("login.html");


cSchedulesLock schedulesLock;
const cSchedules* Schedules = cSchedules::Schedules(schedulesLock);

string head;
time_t seektime = 0;
string displaytime;

if (mode.empty())
	mode = LiveSetup().GetLastWhatsOnListMode();
else
	LiveSetup().SetLastWhatsOnListMode(mode);

current_type = type;
current_mode = mode;
current_attime = attime;
current_fixtime = fixtime;

if (type == "now") {
	head = tr("What's running at")+string(" ")+FormatDateTime(tr("%I:%M %p"), time(0));
} else if (type == "next") {
	head = tr("What's on next?");
} else if (type == "at") {
	if (attime != "")
		displaytime = ExpandTimeString(attime);
	else if (fixtime != "")
		displaytime = ExpandTimeString(fixtime);
	current_displaytime = displaytime;

	seektime = GetTimeT(displaytime);
	if (seektime - time(0) + 3600 < 0) // if wanted time is past more then 1h, then use tomorrow
		seektime += SECSINDAY;
	head = tr("What's running at") + string(" ") + FormatDateTime(tr("%I:%M %p"), seektime) +string(" (") +FormatDateTime(tr("%a, %b %d"), seektime) + string(")");
} else if (type == "favs") {
	head = tr("Favorites");
}

</%cpp>
<& pageelems.doc_type &>
<html>
	<head>
		<title>VDR-Live - <$ head $></title>
		<& pageelems.stylesheets &>
		<& pageelems.ajax_js &>
		<script type="text/javascript"><!--
		function showtime(selection)
		{
			if (selection.options[selection.selectedIndex].value != "")
				window.location.href = "whats_on.html?type=at&mode=<$ current_mode $>&fixtime=" + selection.options[selection.selectedIndex].value;
		}
		function showspectime(selection)
		{
			if (selection.value != "")
				window.location.href = "whats_on.html?type=at&mode=<$ current_mode $>&attime=" + selection.value;
		}
		//--></script>
	</head>
	<body>
		<& pageelems.logo &>
		<& menu active=("whats_on") component=("whats_on.whats_on_actions")>
		<div class="inhalt">
%			if (mode == "list") {
			<table class="listing" cellspacing="0" cellpadding="0">
				<tr class="head">
					<td colspan="8"><div class="boxheader"><div><div><$ head $></div></div></div></td>
				</tr>
%	    }
<%cpp>
	EpgEvents epgEvents;

	if (type != "favs")
	{
		ReadLock channelsLock( Channels );
		if (channelsLock) {
			// int evntNr = 0;
			for (cChannel *Channel = Channels.First(); Channel && Channel->Number() <= LiveSetup().GetLastChannel(); Channel = Channels.Next(Channel)) {
				if (Channel->GroupSep()) {
					continue;
				}
				const cSchedule *Schedule = Schedules->GetSchedule(Channel);
				if (!Schedule) {
					continue;
				}
				const cEvent *Event = NULL;
				if (type == "now")
					Event = Schedule->GetPresentEvent();
				else if (type == "next")
					Event = Schedule->GetFollowingEvent();
				else if (type == "at")
					Event = Schedule->GetEventAround(seektime);
				if (!Event) {
					continue;
				}
	
				EpgInfoPtr epgEvent = EpgEvents::CreateEpgInfo(Channel, Event);
	
				bool truncated = false;
				string truncDescription = StringWordTruncate(epgEvent->LongDescr(), maximumTooltipHintLength, truncated);
				string longDescription = StringEscapeAndBreak(StringWordTruncate(epgEvent->LongDescr(), maximumDescriptionLength))
					+ "<br/><br/>" + tr("Click to view details.");
				bool lastCurrentChanel = true;
	
				if (mode == "detail") {
</%cpp>
				<div class="event">
					<div class="station">
						<div><div><div><a href="schedule.html?channel=<$ Channel->Number() $>" <& tooltip.hint text=(tr("View the schedule of this channel")) &>><$ (epgEvent->Caption()) $></a></div></div></div>
					</div>
					<div class="content">
						<div class="tools">
							<& pageelems.epg_tool_box detail=(1) epgid=(epgEvent->Id()) title=(epgEvent->Title()) startTime=(epgEvent->GetStartTime()) endTime=(epgEvent->GetEndTime()) &>
						</div>
						<div>
							<div class="info"><$ (epgEvent->StartTime(tr("%I:%M %p"))) $> - <$ (epgEvent->EndTime(tr("%I:%M %p"))) $></div>
%					if (epgEvent->Elapsed() >= 0) {
							<div class="progress"><div><& pageelems.progressbar progress=(epgEvent->Elapsed()) &></div></div>
%					}
							<div class="title withmargin"><$ (epgEvent->Title()) $></div>
							<div class="short withmargin"><$ (epgEvent->ShortDescr()) $></div>
							<div class="description withmargin"><$ truncDescription $></div>
%					if (truncated) {
							<div class="more withmargin"><a <& tooltip.hint text=(longDescription) &><& tooltip.display domId=(epgEvent->Id()) &>><$ 	tr("more") $> ...</a></div>
%					}
						</div>
					</div>
				</div>
<%cpp>
				}
				else { // mode == "list"
					lastCurrentChanel = ((Channel->Number() == LiveSetup().GetLastChannel())
										|| (!Channels.Next(Channel)));
</%cpp>
					<tr>
						<& pageelems.epg_tool_box detail=(0) epgid=(epgEvent->Id()) title=(epgEvent->Title()) startTime=(epgEvent->GetStartTime()) endTime=(epgEvent->GetEndTime()) lastCurrentChanel=(lastCurrentChanel ? 1 : 0) &>
						<td class="topaligned <? lastCurrentChanel ? "bottomrow"?>">
							<div class="withmargin">
								<div class="nomargin"><$ (epgEvent->StartTime(tr("%I:%M %p"))) $> - <$ (epgEvent->EndTime(tr("%I:%M %p"))) $></div>
%					if (epgEvent->Elapsed() >= 0) {
								<div class="progress"><div><& pageelems.progressbar progress=(epgEvent->Elapsed()) &></div></div>
%					}
							</div>
						</td>
						<td class="topaligned <? lastCurrentChanel ? "bottomrow"?>">
							<div class="more withmargin"><a
% 					if (!longDescription.empty()) {
							<& tooltip.hint text=(longDescription) &><& tooltip.display domId=(epgEvent->Id()) &>
%					}
							><span class="title"><$ (epgEvent->Title()) $></span><br /><span class="short"><$ (epgEvent->ShortDescr()) $></span></a></div>
						</td>
						<td class="topaligned rightcol <? lastCurrentChanel ? "bottomrow"?>"><div class="station withmargin"><a href="schedule.html?channel=<$ Channel->Number() $>" <& tooltip.hint text=(tr("View the schedule of this channel")) &>><$ (epgEvent->Caption()) $></a></div></td>
					</tr>
%   			}
<%cpp>
		  	}
		}
	}
	else {
		SearchResults results;
		SearchTimers timers;
		for (SearchTimers::iterator timer = timers.begin(); timer != timers.end(); ++timer) {
			if (!timer->UseInFavorites()) continue;
			SearchResults curresults;
			curresults.GetByID(timer->Id());
			results.merge(curresults);
		}
		time_t now = time(NULL);
		for (SearchResults::iterator result = results.begin(); result != results.end(); ++result) {
			long diff = result->StartTime() - now;
			long absdiff = labs(diff);
			if (absdiff >= 24*60*60) continue; // skip broadcasts more than a day away

			string diffstring = string((diff > 0) ? tr("in") : tr("since")) + " ";
			if (absdiff >= (60 * 60))
				diffstring += lexical_cast<std::string>(long(absdiff / (60*60))) + " " + tr("hours");
			else
				diffstring += lexical_cast<std::string>(long(absdiff / 60)) + " " + tr("minutes");	

			string epgId = EpgEvents::EncodeDomId(result->Channel(), result->EventId());	
			string channelname = Channels.GetByChannelID(result->Channel())->Name();
			int channelnr = Channels.GetByChannelID(result->Channel())->Number();
			bool truncated = false;
			string truncDescription = StringWordTruncate(result->Description(), maximumTooltipHintLength, truncated);
			string longDescription = StringEscapeAndBreak(StringWordTruncate(result->Description(), maximumDescriptionLength))
				+ "<br/><br/>" + tr("Click to view details.");

			// last result?
			SearchResults::iterator nextres = result;
			bool bottom = (++nextres == results.end());
</%cpp>
			<tr>
				<& pageelems.epg_tool_box detail=(0) epgid=(epgId) title=(result->Title()) startTime=(result->StartTime()) endTime=(result->StopTime()) lastCurrentChanel=(bottom ? 1 : 0) &>
				<td class="topaligned <? bottom ? "bottomrow"?>">
					<div class="withmargin">
						<div class="nomargin"><$ (FormatDateTime(tr("%I:%M %p"), result->StartTime())) $> - <$ (FormatDateTime(tr("%I:%M %p"), result->StopTime())) $></div>
						<$ diffstring $>
						</div>
						</td>
						<td class="topaligned <? bottom ? "bottomrow"?>">
							<div class="more withmargin"><a
% 					if (!longDescription.empty()) {
							<& tooltip.hint text=(longDescription) &><& tooltip.display domId=(epgId) &>
%					}
							><span class="title"><$ (result->Title()) $></span><br /><span class="short"><$ (result->ShortText()) $></span></a></div>
						</td>
						<td class="topaligned rightcol <? bottom ? "bottomrow"?>"><div class="station withmargin"><a href="schedule.html?channel=<$ channelnr $>" <& tooltip.hint text=(tr("View the schedule of this channel")) &>><$ (channelname) $></a></div></td>
					</tr>
%   			}
<%cpp>
	}
	</%cpp>
%	if (mode == "list") {
			</table>
%   }
		</div>
	</body>
</html>
<%include>page_exit.eh</%include>

<# ------------------------------------------------------------------------- #>

<%def whats_on_actions>
<a class="<? current_type == "now" ? "active" ?>" href="whats_on.html?type=now&amp;mode=<$ current_mode $>" id="nowhref"><$ tr("Now") $></a>
<span class="sep">|</span>
<a class="<? current_type == "next" ? "active" ?>" href="whats_on.html?type=next&amp;mode=<$ current_mode $>" id="nexthref"><$ tr("Next") $></a>
<span class="sep">|</span>
<span class="<? current_type == "at" && current_fixtime != "" ? "active" ?>"><$ tr("What's on") $></span>
<select name="userdeftimes" size="1" id="userdeftimes" onchange="showtime(this)">
	<option value="0"/>
<%cpp>
	vector< string > parts = StringSplit( LiveSetup().GetTimes(), ';' );
	vector< string >::const_iterator part = parts.begin();
	for ( int i = 0; part != parts.end(); ++i, ++part ) {
</%cpp>
	<option <%cpp> reply.out() << ( (current_fixtime != "" && *part == current_displaytime) ? "selected=\"selected\"" : "" ); </%cpp> value="<$ *part $>"> <$ tr("at") + string(" ") + *part $></option>
<%cpp>
	}
</%cpp>
</select>
<span class="sep">|</span>
<span class="<? current_type == "at" && current_fixtime == "" ? "active" ?>"><$ tr("at") $></span>
<input type="text" size="6" name="spectime" id="spectime" value = "<? current_attime != "" ? current_displaytime ?>" onchange="showspectime(this)"/>
<span class="sep">|</span>
% if ( LiveFeatures< features::epgsearch >().Recent() ) {
<a class="<? current_type == "favs" ? "active" ?>" href="whats_on.html?type=favs&amp;mode=<$ current_mode $>"><$ tr("Favorites") $></a>
<span class="sep">|</span>
% }
% if ( current_mode == "list" ) {
<a href="whats_on.html?mode=detail&amp;type=<$ current_type $>&amp;attime=<$ current_attime $>&amp;fixtime=<$ current_fixtime $>"><$ tr("Details view") $></a>
% } else {
<a href="whats_on.html?mode=list&amp;type=<$ current_type $>&amp;attime=<$ current_attime $>&amp;fixtime=<$ current_fixtime $>"><$ tr("List view") $></a>
% }
</%def>
