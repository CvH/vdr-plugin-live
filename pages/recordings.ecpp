<%pre>
#include <vdr/plugin.h>
#include <vdr/config.h>

#include "exception.h"
#include "tools.h"
#include "epg_events.h"

#include "recordings.h"
#include "setup.h"

using namespace vdrlive;
using namespace std;

</%pre>
<%args>
</%args>
<%session scope="global">
bool logged_in(false);
</%session>
<%request scope="page">
RecordingsTree recordingsTree(LiveRecordingsManager());
EpgEvents epgEvents;
</%request>
<%include>page_init.eh</%include>
<{
if (!logged_in && LiveSetup().UseAuth()) return reply.redirect("login.html");
}>
<%cpp>
	pageTitle = tr("Recordings");
</%cpp>
<& pageelems.doc_type &>
<html>
	<head>
		<title>VDR-Live - <$ pageTitle $></title>
		<link rel="stylesheet" type="text/css" href="styles.css" />
		<& tooltip.javascript var=("domTT_styleClass") value=("domTTepg") &>
		<& pageelems.ajax_js &>
		<script type="text/javascript" language="javascript" src="treeview.js"></script>
	</head>
	<body onload="<& pageelems.infobox_start_update &>">
		<& pageelems.logo &>
		<& menu active=("recordings") &>
		<div class="inhalt">
%			if (Recordings.Count() == 0) {
				Keine Aufnahmen vorhanden
%			} else {
			<div class="recordings">
<& recordings.recordings_item &>
			</div>
			<div class="epg_data" style="display: none;">
<& recordings.recordings_data &>
			</div>
%			}
		</div>
	</body>
</html>
<%include>page_exit.eh</%include>

<%def recordings_item>
<%args>
path[];
int level = 0;
</%args>
<{
if (level > 0) {
}>
	<ul class="recordingslist" style="display: none;">
<{
}
else {
}>
	<ul class="recordingslist" style="display: block;">
<{
} // if (level > 0)
RecordingsTree::Map::iterator iter;
RecordingsTree::Map::iterator end = recordingsTree.end(path);
}>
		<li class="recording">
<{
for (iter = recordingsTree.begin(path); iter != end; ++iter) {
	RecordingsTree::RecordingsItemPtr recItem = iter->second;
	string folderimg("folder_closed.png");
	string collapseimg("plus.png");
	if (recItem->IsDir()) {
		reply.out() << string("\t\t\t")
			+ string("<div class=\"recording_item\" onclick=\"Toggle(this)\">\n")
			+ string("\t\t\t<div class=\"recording_imgs\">")
			+ StringRepeat(level, "<img src=\"transparent.png\" alt=\"\" width=\"16px\" height=\"16px\" />")
			+ string("<img class=\"recording_expander\" src=\"") + collapseimg + string("\" alt=\"\" />")
			+ string("<img class=\"recording_folder\" src=\"") + folderimg + string("\" alt=\"\" />")
			+ string("</div>");
}>
			<div class="recording_spec">
			  <div class="recording_name"><$ recItem->Name() $></div>
            </div>
			<div class="recording_actions">&nbsp;</div>
			</div>
<{
		cxxtools::QueryParams recItemParams(qparam, false);
		for (path_type::const_iterator i = path.begin(); i != path.end(); ++i) {
			recItemParams.add("path", *i);
		}
		recItemParams.add("path", recItem->Name());
		recItemParams.add("level", lexical_cast<string, int>(level + 1));
		callComp("recordings.recordings_item", request, reply, recItemParams);
	}
}
for (iter = recordingsTree.begin(path); iter != end; ++iter) {
	RecordingsTree::RecordingsItemPtr recItem = iter->second;
	string folderimg("folder_closed.png");
	string collapseimg("plus.png");
    if (!recItem->IsDir()) {
		const cRecordingInfo* info = recItem->RecInfo();
		if (info) {
			EpgEventPtr epgEvent(new EpgEvent(recItem->Id(),
											  recItem->Name(),
											  info->Title() ? info->Title() : recItem->Name(),
											  info->ShortText() ? info->ShortText() : "",
											  info->Description() ? info->Description() : "",
											  recItem->StartTime(),
											  recItem->StartTime()));
			epgEvents.push_back(epgEvent);
		}
		string day(FormatDateTime("%a,", recItem->StartTime()));
		string dayLen(lexical_cast<string, int>(day.length() - 1) + ".25em;");
		reply.out() << string("\t\t\t")
			+ string("<div class=\"recording_item\">\n")
			+ string("\t\t\t<div class=\"recording_imgs\">")
			+ StringRepeat(level, "<img src=\"transparent.png\" alt=\"\" width=\"16px\" height=\"16px\" />")
			+ string("<img src=\"transparent.png\" alt=\"\" width=\"16px\" height=\"16px\" />")
			+ string("<img src=\"movie.png\" alt=\"movie\" />")
			+ string("</div>");

		string shortDescr(tr("Click to view details.")); if (info && info->ShortText()) shortDescr = (string("") +  info->ShortText() + string("<br />") + shortDescr);
}>
			<div class="recording_spec">
			  <div class="recording_day" style="width: <$ dayLen $>"><$ day $></div>
			  <div class="recording_date"><$ FormatDateTime(tr("%b %d %y"), recItem->StartTime()) $></div>
			  <div class="recording_time"><$ FormatDateTime(tr("%I:%M %p"), recItem->StartTime()) $></div>
			  <div class="recording_name" <& tooltip.hint text=(shortDescr) &><& tooltip.display domId=(recItem->Id()) &>><$ recItem->Name() $></div>
			</div>
			<div class="recording_actions">
				 <& pageelems.ajax_action_href action="play_recording" param=(recItem->Id()) tip=(tr("play this recording.")) image="play.png" alt="" &>
				 <img src="edit.png" alt="" />
				 <img src="del.png" alt="" />
			</div>
			</div>
%	}
		</li>
<{
}
}>
	</ul>
</%def>


<%def recordings_data>
<{

	// create hidden div for the tooltip hints.
	for (vector<EpgEventPtr>::iterator i = epgEvents.begin(); i != epgEvents.end(); ++i) {
		EpgEventPtr epg = *i;
		string start(epg->StartTime("%a,") + string(" ")
				+ epg->StartTime(tr("%b %d %y")) + string(" ")
				+ epg->StartTime(tr("%I:%M %p")));
}>
		<& pageelems.epg_tt_box boxId=(epg->Id()) caption=(epg->Caption()) tools_comp=("recordings.rec_tools") time=(start) title=(epg->Title()) short_descr=(epg->ShortDescr()) long_descr=(epg->LongDescr()) elapsed=(epg->Elapsed()) &>
<{
	}
}>
</%def>

<%def rec_tools>
<%args>
	string id;
</%args>
<& pageelems.ajax_action_href action="play_recording" param=(id) tip=(tr("play this recording.")) image="play.png" alt="" &>
</%def>
