<%pre>
#include <sstream>
#include <vdr/plugin.h>
#include <vdr/config.h>
#include <tnt/savepoint.h>
#include "exception.h"
#include "tools.h"
#include "recordings.h"

using namespace vdrlive;

</%pre>
<%args>
</%args>
<%request scope="global">
std::string pageTitle(tr("Recordings"));
</%request>
<%request scope="page">
RecordingsTree recordingsTree;
</%request>
<%cpp>
try {
	tnt::Savepoint spoint(reply);
</%cpp>
<html>
	<head>
		<title>VDR-Live - <$ pageTitle $></title>
		<link rel="stylesheet" type="text/css" href="styles.css" />
		<script src="treeview.js" type="text/javascript" />
	</head>
	<body>
		<div class="left_area">
			<img src="logo.png" alt="VDR Live!" border="0" />
<& menu &>
		</div>
		<div class="inhalt">
<& pageelems.header_box content=(tr("Recordings")) &>
%			if (Recordings.Count() == 0) {
				Keine Aufnahmen vorhanden
%			} else {
				<div class="recordings">
<& recordings.recordings_item &>
				</div>
%			}
		</div>
	</body>
</html>
<%def recordings_item>
<%args>
path[];
int level = 0;
</%args>
<{
if (level > 0) {
}>
<ul class="recordingslist" style="display: none;">
<{
}
else {
}>
<ul class="recordingslist" style="display: block;">
<{
} // if (level > 0)

RecordingsTree::Map::iterator iter;
RecordingsTree::Map::iterator end = recordingsTree.end(path);
for (iter = recordingsTree.begin(path); iter != end; iter++) {
	RecordingsTree::RecordingsItemPtr recItem = iter->second;
	std::string folderimg(level > 0 ? "folder_closed.png" : "folder_closed.png");
	std::string collapseimg(level > 0 ? "plus.png" : "plus.png");
}>
	<li class="recording">
<{
	for (int i = 0; i < level; i++) {
		reply.out() << "<img src=\"transparent.png\" alt=\"\" width=\"16\" height=\"16\" />";
	}
}>
%	if (recItem->IsDir()) {
		<a onClick="Toggle(this)">
%		// Die folgenden img-Tags muessen direkt auf einander folgen
		<img class="recording_expander" src="<$ collapseimg $>" alt="" /><img class="recording_folder" src="<$ folderimg $>" alt="" />
		<span class="recording_name"><$ recItem->Name() $></span>
		</a>
<{
		cxxtools::QueryParams recItemParams(qparam, false);
		for (path_type::const_iterator i = path.begin(); i != path.end(); ++i) {
			recItemParams.add("path", *i);
		}
		ostringstream levelStr;
		levelStr << (level + 1);
		recItemParams.add("path", recItem->Name());
		recItemParams.add("level", levelStr.str());
		callComp("recordings.recordings_item", request, reply, recItemParams);
	} else {
}>
		<img src="transparent.png" alt="" width="16" height="16" /><img src="file.png" alt="file" />
		<span class="recording_date"><$ FormatDateTime(tr("%a, %b %d"), recItem->StartTime()) $></span>
		<span class="recording_time"><$ FormatDateTime(tr("%I:%M %p"), recItem->StartTime()) $></span>
		<span class="recording_name"><$ recItem->Name() $></span>
%	}
	</li>
<{
}
}>
</ul>
</%def>
<%cpp>
	spoint.commit();
} catch ( HtmlError const& ex ) {
	cxxtools::QueryParams param = qparam;
	param.add( "errorTitle", ex.GetTitle() );
	param.add( "errorMessage", ex.GetMessage() );
	callComp( "error", request, reply, param );
}
</%cpp>
