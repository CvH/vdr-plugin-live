<%pre>
#include <sstream>
#include <vdr/plugin.h>
#include <vdr/config.h>
#include "exception.h"
#include "tools.h"
#include "recordings.h"

using namespace vdrlive;

</%pre>
<%args>
</%args>
<%request scope="page">
RecordingsTree recordingsTree;
</%request>
<%include>page_init.eh</%include>
<%cpp>
	pageTitle = tr("Recordings");
</%cpp>
<& pageelems.doc_type &>
<html>
	<head>
		<title>VDR-Live - <$ pageTitle $></title>
		<link rel="stylesheet" type="text/css" href="styles.css" />
		<script src="treeview.js" type="text/javascript" />
	</head>
	<body>
		<div class="left_area">
			<& pageelems.logo &>
			<& menu &>
		</div>
		<div class="right_area">
		<div class="inhalt">
			<& pageelems.header_box content=(tr("Recordings")) &>
%			if (Recordings.Count() == 0) {
				Keine Aufnahmen vorhanden
%			} else {
				<div class="recordings">
<& recordings.recordings_item &>
				</div>
%			}
		</div>
		</div>
	</body>
</html>
<%include>page_exit.eh</%include>

<%def recordings_item>
<%args>
path[];
int level = 0;
</%args>
<{
if (level > 0) {
}>
	<ul class="recordingslist" style="display: none;">
<{
}
else {
}>
	<ul class="recordingslist" style="display: block;">
<{
} // if (level > 0)
RecordingsTree::Map::iterator iter;
RecordingsTree::Map::iterator end = recordingsTree.end(path);
for (iter = recordingsTree.begin(path); iter != end; iter++) {
	RecordingsTree::RecordingsItemPtr recItem = iter->second;
	std::string folderimg("folder_closed.png");
	std::string collapseimg("plus.png");
}>
		<li class="recording">
<{
	if (recItem->IsDir()) {
		reply.out() << std::string("\t\t\t")
			+ std::string("<div class=\"recording_item\" onclick=\"Toggle(this)\">\n")
			+ std::string("\t\t\t<div class=\"recording_imgs\">")
			+ StringRepeat(level, "<img src=\"transparent.png\" alt=\"\" width=\"16\" height=\"16\" />")
			+ std::string("<img class=\"recording_expander\" src=\"") + collapseimg + std::string("\" alt=\"\" />")
			+ std::string("<img class=\"recording_folder\" src=\"") + folderimg + std::string("\" alt=\"\" />")
			+ std::string("</div>");
}>
			<div class="recording_name"><$ recItem->Name() $></div>
			</div>
<{
		cxxtools::QueryParams recItemParams(qparam, false);
		for (path_type::const_iterator i = path.begin(); i != path.end(); ++i) {
			recItemParams.add("path", *i);
		}
		ostringstream levelStr;
		levelStr << (level + 1);
		recItemParams.add("path", recItem->Name());
		recItemParams.add("level", levelStr.str());
		callComp("recordings.recordings_item", request, reply, recItemParams);
	} else {
		reply.out() << std::string("\t\t\t")
			+ std::string("<div class=\"recording_item\">\n")
			+ std::string("\t\t\t<div class=\"recording_imgs\">")
			+ StringRepeat(level, "<img src=\"transparent.png\" alt=\"\" width=\"16\" height=\"16\" />")
			+ std::string("<img src=\"transparent.png\" alt=\"\" width=\"16px\" height=\"16px\" />")
			+ std::string("<img src=\"file.png\" alt=\"file\" />")
			+ std::string("</div>");
}>
			<div class="recording_day"><$ FormatDateTime("%a,", recItem->StartTime()) $></div>
			<div class="recording_date"><$ FormatDateTime(tr("%b %d %y"), recItem->StartTime()) $></div>
			<div class="recording_time"><$ FormatDateTime(tr("%I:%M %p"), recItem->StartTime()) $></div>
			<div class="recording_name"><$ recItem->Name() $></div>
			</div>
%	}
		</li>
<{
}
}>
	</ul>
</%def>
